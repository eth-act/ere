#![allow(clippy::double_parens)]

use serde::{Deserialize, Serialize};
use strum::{EnumDiscriminants, EnumIs, EnumTryAs, FromRepr};

/// Proof generated by [`zkVM::prove`], that also includes the [`PublicValues`]
/// for [`zkVM::verify`] to work.
#[derive(Clone, Debug, Serialize, Deserialize, EnumDiscriminants, EnumIs, EnumTryAs)]
#[strum_discriminants(derive(Default, FromRepr))]
#[strum_discriminants(name(ProofKind))]
pub enum Proof {
    /// Compressed proof in contant size regardless of the cycle count.
    #[strum_discriminants(default)]
    Compressed(Vec<u8>),
    /// Groth16 proof that internally verifies a Compressed proof.
    Groth16(Vec<u8>),
}

impl Proof {
    /// Construct [`Proof`] from [`ProofKind`] and bytes.
    pub fn new(proof_kind: ProofKind, bytes: Vec<u8>) -> Self {
        match proof_kind {
            ProofKind::Compressed => Self::Compressed(bytes),
            ProofKind::Groth16 => Self::Groth16(bytes),
        }
    }

    /// Returns [`ProofKind`].
    pub fn kind(&self) -> ProofKind {
        ProofKind::from(self)
    }

    /// Returns inner proof as bytes.
    pub fn as_bytes(&self) -> &[u8] {
        match self {
            Self::Compressed(bytes) => bytes,
            Self::Groth16(bytes) => bytes,
        }
    }
}
