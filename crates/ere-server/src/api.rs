#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(dead_code)]

// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub input: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub public_values: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub report: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProveRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub input: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProveResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub public_values: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub proof: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub report: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifyRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub proof: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifyResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub public_values: ::prost::alloc::vec::Vec<u8>,
}
pub use twirp;
#[twirp::async_trait::async_trait]
pub trait ZkvmService: Send + Sync {
    async fn execute(
        &self,
        req: twirp::Request<ExecuteRequest>,
    ) -> twirp::Result<twirp::Response<ExecuteResponse>>;
    async fn prove(
        &self,
        req: twirp::Request<ProveRequest>,
    ) -> twirp::Result<twirp::Response<ProveResponse>>;
    async fn verify(
        &self,
        req: twirp::Request<VerifyRequest>,
    ) -> twirp::Result<twirp::Response<VerifyResponse>>;
}
#[twirp::async_trait::async_trait]
impl<T> ZkvmService for std::sync::Arc<T>
where
    T: ZkvmService + Sync + Send,
{
    async fn execute(
        &self,
        req: twirp::Request<ExecuteRequest>,
    ) -> twirp::Result<twirp::Response<ExecuteResponse>> {
        T::execute(&*self, req).await
    }
    async fn prove(
        &self,
        req: twirp::Request<ProveRequest>,
    ) -> twirp::Result<twirp::Response<ProveResponse>> {
        T::prove(&*self, req).await
    }
    async fn verify(
        &self,
        req: twirp::Request<VerifyRequest>,
    ) -> twirp::Result<twirp::Response<VerifyResponse>> {
        T::verify(&*self, req).await
    }
}
pub fn router<T>(api: T) -> twirp::Router
where
    T: ZkvmService + Clone + Send + Sync + 'static,
{
    twirp::details::TwirpRouterBuilder::new("/api.ZkvmService", api)
        .route(
            "/Execute",
            |api: T, req: twirp::Request<ExecuteRequest>| async move {
                api.execute(req).await
            },
        )
        .route(
            "/Prove",
            |api: T, req: twirp::Request<ProveRequest>| async move {
                api.prove(req).await
            },
        )
        .route(
            "/Verify",
            |api: T, req: twirp::Request<VerifyRequest>| async move {
                api.verify(req).await
            },
        )
        .build()
}
#[twirp::async_trait::async_trait]
impl ZkvmService for twirp::client::Client {
    async fn execute(
        &self,
        req: twirp::Request<ExecuteRequest>,
    ) -> twirp::Result<twirp::Response<ExecuteResponse>> {
        self.request("api.ZkvmService/Execute", req).await
    }
    async fn prove(
        &self,
        req: twirp::Request<ProveRequest>,
    ) -> twirp::Result<twirp::Response<ProveResponse>> {
        self.request("api.ZkvmService/Prove", req).await
    }
    async fn verify(
        &self,
        req: twirp::Request<VerifyRequest>,
    ) -> twirp::Result<twirp::Response<VerifyResponse>> {
        self.request("api.ZkvmService/Verify", req).await
    }
}
#[allow(dead_code)]
pub mod handler {
    use super::*;
    pub struct ZkvmServiceHandler {
        inner: std::sync::Arc<dyn ZkvmService>,
    }
    impl ZkvmServiceHandler {
        #[allow(clippy::new_ret_no_self)]
        pub fn new<M: ZkvmService + 'static>(inner: M) -> Self {
            Self {
                inner: std::sync::Arc::new(inner),
            }
        }
    }
    #[twirp::async_trait::async_trait]
    impl twirp::client::DirectHandler for ZkvmServiceHandler {
        fn service(&self) -> &str {
            "api.ZkvmService"
        }
        async fn handle(
            &self,
            method: &str,
            req: twirp::reqwest::Request,
        ) -> twirp::Result<twirp::reqwest::Response> {
            match method {
                "Execute" => {
                    twirp::details::encode_response(
                        self
                            .inner
                            .execute(twirp::details::decode_request(req).await?)
                            .await?,
                    )
                }
                "Prove" => {
                    twirp::details::encode_response(
                        self
                            .inner
                            .prove(twirp::details::decode_request(req).await?)
                            .await?,
                    )
                }
                "Verify" => {
                    twirp::details::encode_response(
                        self
                            .inner
                            .verify(twirp::details::decode_request(req).await?)
                            .await?,
                    )
                }
                _ => {
                    Err(
                        twirp::bad_route(
                            format!(
                                "unknown rpc `{method}` for service `{}`, url: {:?}",
                                "api.ZkvmService",
                                req.url(),
                            ),
                        ),
                    )
                }
            }
        }
    }
}
