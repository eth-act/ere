name: Test and clippy zkVM

on:
  workflow_call:
    inputs:
      zkvm:
        description: 'zkVM to test'
        required: true
        type: string
      toolchain:
        description: 'Rust toolchain to use'
        required: false
        type: string
        default: 1.86.0
      test_ere_dockerized:
        description: 'Whether test ere-dockerized with the selected zkVM or not'
        required: false
        type: boolean
        default: true
      # Currently only needed by those zkvms that need Cuda during building process by default
      default_features:
        description: 'Cargo clippy/build with default features or not'
        required: false
        type: boolean
        default: true
      # Remove when we use larger runners, currently only needed to skip some zisk test
      test_options:
        description: 'Cargo test options when testing via Docker'
        required: false
        type: string
        default: ''

env:
  CARGO_TERM_COLOR: always

jobs:
  build_image:
    name: Build image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_version: ${{ steps.inspect_image.outputs.image_version }}
      base_image_tag: ${{ steps.inspect_image.outputs.base_image_tag }}
      base_zkvm_image_tag: ${{ steps.inspect_image.outputs.base_zkvm_image_tag }}
      cli_zkvm_image_tag: ${{ steps.inspect_image.outputs.cli_zkvm_image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Dockerfile changes
        id: changed_files
        uses: tj-actions/changed-files@v46
        with:
          files_yaml: |
            base:
              - docker/base/Dockerfile.base
            base_zkvm:
              - docker/${{ inputs.zkvm }}/Dockerfile
              - scripts/sdk_installers/install_${{ inputs.zkvm }}_sdk.sh
       
      - name: Get image version and tags of ere-base and ere-base-${{ inputs.zkvm }}
        id: inspect_image
        run: |
          ZKVM_CRATE_VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[] | select(.name == "ere-${{ inputs.zkvm }}") | .version')
          GIT_REV="${{ github.sha }}"
          IMAGE_VERSION="$ZKVM_CRATE_VERSION-${GIT_REV:0:7}"

          BASE_IMAGE_NAME="ghcr.io/${{ github.repository }}/ere-base"
          BASE_ZKVM_IMAGE_NAME="ghcr.io/${{ github.repository }}/ere-base-${{ inputs.zkvm }}"
          CLI_ZKVM_IMAGE_NAME="ghcr.io/${{ github.repository }}/ere-cli-${{ inputs.zkvm }}"

          BASE_IMAGE_TAG="$BASE_IMAGE_NAME:$IMAGE_VERSION"
          BASE_ZKVM_IMAGE_TAG="$BASE_ZKVM_IMAGE_NAME:$IMAGE_VERSION"
          CLI_ZKVM_IMAGE_TAG="$CLI_ZKVM_IMAGE_NAME:$IMAGE_VERSION"

          BUILD_BASE_IMAGE="true"
          BUILD_BASE_ZKVM_IMAGE="true"

          # Try to reuse image by re-tagging if related files are unchanged
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_BASE_GIT_REV="${{ github.event.pull_request.base.sha }}"
            PR_BASE_IMAGE_VERSION="$ZKVM_CRATE_VERSION-${PR_BASE_GIT_REV:0:7}"

            if [ "${{ steps.changed_files.outputs.base_any_changed }}" == "false" ]; then
              if docker buildx imagetools create --tag "$BASE_IMAGE_TAG" "$BASE_IMAGE_NAME:$PR_BASE_IMAGE_VERSION" 2>/dev/null; then
                echo "Created new tag $BASE_IMAGE_TAG referring to $BASE_IMAGE_NAME:$PR_BASE_IMAGE_VERSION"
                BUILD_BASE_IMAGE="false"
              fi
            fi

            if [ "${{ steps.changed_files.outputs.base_zkvm_any_changed }}" == "false" ]; then
              if docker buildx imagetools create --tag "$BASE_ZKVM_IMAGE_TAG" "$BASE_ZKVM_IMAGE_NAME:$PR_BASE_IMAGE_VERSION" 2>/dev/null; then
                echo "Created new tag $BASE_ZKVM_IMAGE_TAG referring to $BASE_ZKVM_IMAGE_NAME:$PR_BASE_IMAGE_VERSION"
                BUILD_BASE_ZKVM_IMAGE="false"
              fi
            fi
          fi

          echo "image_version=$IMAGE_VERSION" >> $GITHUB_OUTPUT
          echo "base_image_tag=$BASE_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "base_zkvm_image_tag=$BASE_ZKVM_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "cli_zkvm_image_tag=$CLI_ZKVM_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "build_base_image=$BUILD_BASE_IMAGE" >> $GITHUB_OUTPUT
          echo "build_base_zkvm_image=$BUILD_BASE_ZKVM_IMAGE" >> $GITHUB_OUTPUT

      - name: Build ere-base image
        if: ${{ steps.inspect_image.outputs.build_base_image == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/base/Dockerfile.base
          push: true
          tags: ${{ steps.inspect_image.outputs.base_image_tag }}

      - name: Build ere-base-${{ inputs.zkvm }} image
        if: ${{ steps.inspect_image.outputs.build_base_zkvm_image == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/${{ inputs.zkvm }}/Dockerfile
          push: true
          tags: ${{ steps.inspect_image.outputs.base_zkvm_image_tag }}
          build-args: |
            BASE_IMAGE_TAG=${{ steps.inspect_image.outputs.base_image_tag }}
            CI=1

  clippy_via_docker:
    name: Clippy via Docker
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-${{ inputs.toolchain }}-${{ inputs.zkvm }}-${{ hashFiles('Cargo.lock') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image ere-base-${{ inputs.zkvm }}
        run: docker image pull ${{ needs.build_image.outputs.base_zkvm_image_tag }}

      - name: Run cargo clippy for ere-${{ inputs.zkvm }} via Docker
        run: |
          DOCKER_CMD="docker run \
            --rm \
            --interactive \
            --volume ${{ github.workspace }}:/ere \
            --volume $HOME/.cargo:/root/.cargo \
            --workdir /ere \
            ${{ needs.build_image.outputs.base_zkvm_image_tag }} \
            /bin/bash"

          cat <<EOF | $DOCKER_CMD
          set -e

          OPTIONS="--all-targets ${{ inputs.default_features && '' || '--no-default-features' }} -- -D warnings"
          cargo clippy --package ere-${{ inputs.zkvm }} \$OPTIONS
          cargo clippy --package ere-cli --features cli,${{ inputs.zkvm }} \$OPTIONS

          chown -R $(id -u):$(id -g) ~/.cargo
          chown -R $(id -u):$(id -g) target
          EOF

  test_via_docker:
    name: Test via Docker
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-${{ inputs.toolchain }}-${{ inputs.zkvm }}-${{ hashFiles('Cargo.lock') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image ere-base-${{ inputs.zkvm }}
        run: docker image pull ${{ needs.build_image.outputs.base_zkvm_image_tag }}

      - name: Run cargo test for ere-${{ inputs.zkvm }} via Docker
        run: |
          DOCKER_CMD="docker run \
            --rm \
            --interactive \
            --volume ${{ github.workspace }}:/ere \
            --volume $HOME/.cargo:/root/.cargo \
            --workdir /ere \
            ${{ needs.build_image.outputs.base_zkvm_image_tag }} \
            /bin/bash"

          cat <<EOF | $DOCKER_CMD
          set -e -o pipefail

          CARGO_BUILD_CMD="cargo test --release --package ere-${{ inputs.zkvm }} \
            ${{ inputs.default_features && '' || '--no-default-features' }} \
            --no-run --message-format json"
          EXEC=\$(RUSTFLAGS=-Ctarget-cpu=native \$CARGO_BUILD_CMD \
            | jq -r 'select(.executable) | select(.package_id | contains("ere-${{ inputs.zkvm }}")) | .executable')
          \$EXEC ${{ inputs.test_options }}

          chown -R $(id -u):$(id -g) ~/.cargo
          chown -R $(id -u):$(id -g) target
          EOF

  test_ere_dockerized:
    name: Test ere-dockerized with the selected zkVM
    if: ${{ inputs.test_ere_dockerized }}
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-${{ inputs.toolchain }}-${{ inputs.zkvm }}-${{ hashFiles('Cargo.lock') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ere-cli-${{ inputs.zkvm }} image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/cli/Dockerfile
          push: true
          tags: ${{ needs.build_image.outputs.cli_zkvm_image_tag }}
          build-args: |
            BASE_ZKVM_IMAGE_TAG=${{ needs.build_image.outputs.base_zkvm_image_tag }}
            ZKVM=${{ inputs.zkvm }}
            CI=1

      - name: Pull images ere-base, ere-base-${{ inputs.zkvm }}, and ere-cli-${{ inputs.zkvm }}
        run: |
          docker image pull ${{ needs.build_image.outputs.base_image_tag }}
          docker image pull ${{ needs.build_image.outputs.base_zkvm_image_tag }}
          docker image pull ${{ needs.build_image.outputs.cli_zkvm_image_tag }}
          docker image tag ${{ needs.build_image.outputs.base_image_tag }} ere-base:${{ needs.build_image.outputs.image_version }}
          docker image tag ${{ needs.build_image.outputs.base_zkvm_image_tag }} ere-base-${{ inputs.zkvm }}:${{ needs.build_image.outputs.image_version }}
          docker image tag ${{ needs.build_image.outputs.cli_zkvm_image_tag }} ere-cli-${{ inputs.zkvm }}:${{ needs.build_image.outputs.image_version }}

      - name: Run cargo test for ere-${{ inputs.zkvm }} via ere-dockerized
        run: cargo test --release --package ere-dockerized -- ${{ inputs.zkvm }}
