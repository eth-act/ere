name: Rust Checks
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs: 
  check-fmt:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --check --all

  check-tests:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate: [ere-sp1, ere-risc0]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          cache-from: type=gha
          cache-to:   type=gha,mode=max
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install nvcc
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/$(. /etc/os-release; echo "${ID}${VERSION_ID}" | tr -d '.' | tr '[:upper:]' '[:lower:]')/$(uname -m)/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          rm cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get install -y cuda-toolkit

          cat >> ~/.bashrc <<EOF
          export PATH="$PATH:/usr/local/cuda/bin"
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/cuda/lib64"
          EOF

      - name: Check clippy
        run: cargo clippy --bins --lib --examples --tests --benches --all-features -p ${{ matrix.crate }}

      - name: Run tests
        run: cargo test --release -p ${{ matrix.crate }}
